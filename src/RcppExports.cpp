// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

// tapplyCpp
NumericMatrix tapplyCpp(NumericVector& tar, NumericVector& var, NumericVector& cost, int nvar, int ntar, int n);
RcppExport SEXP _ImbTreeEntropy_tapplyCpp(SEXP tarSEXP, SEXP varSEXP, SEXP costSEXP, SEXP nvarSEXP, SEXP ntarSEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector& >::type tar(tarSEXP);
    Rcpp::traits::input_parameter< NumericVector& >::type var(varSEXP);
    Rcpp::traits::input_parameter< NumericVector& >::type cost(costSEXP);
    Rcpp::traits::input_parameter< int >::type nvar(nvarSEXP);
    Rcpp::traits::input_parameter< int >::type ntar(ntarSEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    rcpp_result_gen = Rcpp::wrap(tapplyCpp(tar, var, cost, nvar, ntar, n));
    return rcpp_result_gen;
END_RCPP
}
// EntropyCpp
NumericVector EntropyCpp(NumericVector target, NumericVector entropy_par, String type);
RcppExport SEXP _ImbTreeEntropy_EntropyCpp(SEXP targetSEXP, SEXP entropy_parSEXP, SEXP typeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type target(targetSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type entropy_par(entropy_parSEXP);
    Rcpp::traits::input_parameter< String >::type type(typeSEXP);
    rcpp_result_gen = Rcpp::wrap(EntropyCpp(target, entropy_par, type));
    return rcpp_result_gen;
END_RCPP
}
// ClassErrorLocalCpp
NumericVector ClassErrorLocalCpp(NumericMatrix dat);
RcppExport SEXP _ImbTreeEntropy_ClassErrorLocalCpp(SEXP datSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type dat(datSEXP);
    rcpp_result_gen = Rcpp::wrap(ClassErrorLocalCpp(dat));
    return rcpp_result_gen;
END_RCPP
}
// AvoidSameClassCpp
int AvoidSameClassCpp(NumericVector probs_l, NumericVector probs_r, RObject cost, int k);
RcppExport SEXP _ImbTreeEntropy_AvoidSameClassCpp(SEXP probs_lSEXP, SEXP probs_rSEXP, SEXP costSEXP, SEXP kSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type probs_l(probs_lSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type probs_r(probs_rSEXP);
    Rcpp::traits::input_parameter< RObject >::type cost(costSEXP);
    Rcpp::traits::input_parameter< int >::type k(kSEXP);
    rcpp_result_gen = Rcpp::wrap(AvoidSameClassCpp(probs_l, probs_r, cost, k));
    return rcpp_result_gen;
END_RCPP
}
// ProbPeak
double ProbPeak(NumericVector prob, int ntar);
RcppExport SEXP _ImbTreeEntropy_ProbPeak(SEXP probSEXP, SEXP ntarSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type prob(probSEXP);
    Rcpp::traits::input_parameter< int >::type ntar(ntarSEXP);
    rcpp_result_gen = Rcpp::wrap(ProbPeak(prob, ntar));
    return rcpp_result_gen;
END_RCPP
}
// InformationGainCpp
NumericVector InformationGainCpp(NumericVector variable, int n, NumericVector target, int ntar, double entropy_parent, NumericVector entropy_par, double cp, String type, RObject weights, RObject cost, String overfit);
RcppExport SEXP _ImbTreeEntropy_InformationGainCpp(SEXP variableSEXP, SEXP nSEXP, SEXP targetSEXP, SEXP ntarSEXP, SEXP entropy_parentSEXP, SEXP entropy_parSEXP, SEXP cpSEXP, SEXP typeSEXP, SEXP weightsSEXP, SEXP costSEXP, SEXP overfitSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type variable(variableSEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type target(targetSEXP);
    Rcpp::traits::input_parameter< int >::type ntar(ntarSEXP);
    Rcpp::traits::input_parameter< double >::type entropy_parent(entropy_parentSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type entropy_par(entropy_parSEXP);
    Rcpp::traits::input_parameter< double >::type cp(cpSEXP);
    Rcpp::traits::input_parameter< String >::type type(typeSEXP);
    Rcpp::traits::input_parameter< RObject >::type weights(weightsSEXP);
    Rcpp::traits::input_parameter< RObject >::type cost(costSEXP);
    Rcpp::traits::input_parameter< String >::type overfit(overfitSEXP);
    rcpp_result_gen = Rcpp::wrap(InformationGainCpp(variable, n, target, ntar, entropy_parent, entropy_par, cp, type, weights, cost, overfit));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_ImbTreeEntropy_tapplyCpp", (DL_FUNC) &_ImbTreeEntropy_tapplyCpp, 6},
    {"_ImbTreeEntropy_EntropyCpp", (DL_FUNC) &_ImbTreeEntropy_EntropyCpp, 3},
    {"_ImbTreeEntropy_ClassErrorLocalCpp", (DL_FUNC) &_ImbTreeEntropy_ClassErrorLocalCpp, 1},
    {"_ImbTreeEntropy_AvoidSameClassCpp", (DL_FUNC) &_ImbTreeEntropy_AvoidSameClassCpp, 4},
    {"_ImbTreeEntropy_ProbPeak", (DL_FUNC) &_ImbTreeEntropy_ProbPeak, 2},
    {"_ImbTreeEntropy_InformationGainCpp", (DL_FUNC) &_ImbTreeEntropy_InformationGainCpp, 11},
    {NULL, NULL, 0}
};

RcppExport void R_init_ImbTreeEntropy(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
